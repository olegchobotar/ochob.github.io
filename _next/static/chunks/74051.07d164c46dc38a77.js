"use strict";(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[74051],{74051:(t,e,n)=>{n.d(e,{getActiveClaimCondition:()=>u});var a=n(53047);let i=[{type:"uint256",name:"_tokenId"}],o=[{type:"uint256"}];async function r(t){return(0,a.readContract)({contract:t.contract,method:["0x5ab063e8",i,o],params:[t.tokenId]})}let c=[{type:"uint256",name:"_tokenId"},{type:"uint256",name:"_conditionId"}],m=[{type:"tuple",name:"condition",components:[{type:"uint256",name:"startTimestamp"},{type:"uint256",name:"maxClaimableSupply"},{type:"uint256",name:"supplyClaimed"},{type:"uint256",name:"quantityLimitPerWallet"},{type:"bytes32",name:"merkleRoot"},{type:"uint256",name:"pricePerToken"},{type:"address",name:"currency"},{type:"string",name:"metadata"}]}];async function p(t){return(0,a.readContract)({contract:t.contract,method:["0xd45b28d7",c,m],params:[t.tokenId,t.conditionId]})}async function u(t){try{let e=await r(t);return p({...t,conditionId:e})}catch{throw Error("Claim condition not found")}}}}]);