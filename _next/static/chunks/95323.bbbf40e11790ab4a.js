"use strict";(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[95323],{95323:(t,e,n)=>{n.d(e,{getActiveClaimCondition:()=>u});var a=n(53047);let i=[],r=[{type:"uint256"}];async function c(t){return(0,a.readContract)({contract:t.contract,method:["0xc68907de",i,r],params:[]})}let o=[{type:"uint256",name:"_conditionId"}],m=[{type:"tuple",name:"condition",components:[{type:"uint256",name:"startTimestamp"},{type:"uint256",name:"maxClaimableSupply"},{type:"uint256",name:"supplyClaimed"},{type:"uint256",name:"quantityLimitPerWallet"},{type:"bytes32",name:"merkleRoot"},{type:"uint256",name:"pricePerToken"},{type:"address",name:"currency"},{type:"string",name:"metadata"}]}];async function p(t){return(0,a.readContract)({contract:t.contract,method:["0x6f8934f4",o,m],params:[t.conditionId]})}async function u(t){try{let e=await c(t);return p({...t,conditionId:e})}catch{throw Error("Claim condition not found")}}}}]);